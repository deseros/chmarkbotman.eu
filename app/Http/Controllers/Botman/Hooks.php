<?php

namespace App\Http\Controllers\Botman;

use App\Http\Controllers\Controller;
use BotMan\Drivers\Telegram\Extensions\Keyboard;
use BotMan\Drivers\Telegram\Extensions\KeyboardButton;
use App\Conversations\ExampleConversation;
use App\Conversations\StartConversation;
use Illuminate\Support\Facades\Log;
use GuzzleHttp\Client;
use App\Http\Controllers\FindClientDB;
use App\Models\Ticket;
use App\Models\ClientTelegramId;
use Illuminate\Support\Facades\DB;
use App\Events\BotCompleteSending;
use App\Events\EventBitrixAddTask;

class Hooks extends Controller
{
    public function __construct()
    {
    }
    public function start($bot)
    {
        $check_status = $bot->getMessage()->getPayload();
        if (isset($check_status['chat'])) {
            if ($check_status['from']['id'] == $check_status['chat']['id']) {
                $user = $bot->getUser();
                $id = $user->getId();
                $info = $user->getInfo();
                $check_user = ClientTelegramId::where('telegram_id', '=', $id)->exists();
                if (!empty($check_user)) {
                    $keyboard = Keyboard::create()->type(Keyboard::TYPE_KEYBOARD)
                        ->oneTimeKeyboard(true)
                        ->resizeKeyboard(true)
                        ->addRow(
                            KeyboardButton::create("–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è")->callbackData('first_inline')
                        )
                        ->toArray();
                    $bot->reply('–í–∞—à ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.', $keyboard);
                    $bot->reply('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è¬ª, –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.' . "\n" . "\n" . '–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üéõ');
                } else {
                    $bot->startConversation(new StartConversation);
                    $first_name = isset($info['user']['first_name']) ? $info['user']['first_name'] : '–∏–º—è —Å–∫—Ä—ã—Ç–æ';
                    $last_name = isset($info['user']['last_name']) ? $info['user']['last_name'] : '—Ñ–∞–º–∏–ª–∏—è —Å–∫—Ä—ã—Ç–∞';
                    $username = isset($info['user']['username']) ? $info['user']['username'] : '–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫—Ä—ã—Ç–æ';
                    $text = '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ' . "\n" . '–í—ã–ø–æ–ª–Ω–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' . "\n"
                        . '<b>–ï–≥–æ –∏–º—è </b>' . '  ' . $first_name . "\n"
                        . '<b>–ï–≥–æ —Ñ–∞–º–∏–ª–∏—è </b>' . '  ' . $last_name . "\n"
                        . '<b>–ï–≥–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>' . '  ' . '@' . $username . "\n"
                        . '<b>–ï–≥–æ ID</b>' . '  ' . $id;
                    $client = new Client();
                    $res = $client->request(
                        'POST',
                        'https://api.telegram.org/bot' . env('TELEGRAM_BOT_TOKEN') . '/sendMessage',
                        [
                            'form_params' => [
                                'chat_id' => '834922187',
                                'text' => $text,
                                'parse_mode' => 'HTML',
                            ]
                        ]
                    );
                }
            }
        }
    }
    public function start_ticket($bot)
    {
        $check_status = $bot->getMessage()->getPayload();
        if (isset($check_status['chat'])) {
            if ($check_status['from']['id'] == $check_status['chat']['id']) {
                $last_ticket = new FindClientDB();
                if (empty($last_ticket->find_client())) {
                    $bot->startConversation(new StartConversation);
                } else {
                    $bot->startConversation(new ExampleConversation);
                }
            }
        }
    }
    public function complete_ticket($bot)
    {
        $check_status = $bot->getMessage()->getPayload();
        if (isset($check_status['chat'])) {
            if ($check_status['from']['id'] == $check_status['chat']['id']) {
                $last_ticket = new FindClientDB();
                if (empty($last_ticket->find_client())) {
                    $bot->startConversation(new StartConversation);
                } else {
                    $channel_link = Keyboard::create()->type(Keyboard::TYPE_INLINE)
                        ->addRow(
                            KeyboardButton::create("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –æ–±—Ä–∞—â–µ–Ω–∏–π")->url($last_ticket->find_client()['invait_link_channel'])
                        )
                        ->toArray();
                    $bot->reply('–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ', $channel_link);
                    $keyboard = Keyboard::create()->type(Keyboard::TYPE_KEYBOARD)
                        ->oneTimeKeyboard(true)
                        ->resizeKeyboard(true)
                        ->addRow(
                            KeyboardButton::create("–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è")->callbackData('first_inline')
                        )
                        ->toArray();
                    $bot->reply('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è¬ª, –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.' . "\n" . "\n" . '–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üéõ', $keyboard);
                    $data_task = array(
                        [
                            "task_title" => $last_ticket->find_last_ticket()[0]['subject'],
                            "task_description" => $last_ticket->find_last_ticket()[0]['description'],
                            "created" => $last_ticket->find_client()['bx_id_user'],
                            "id_group" => $last_ticket->find_client()['bx_id_group']
                        ]
                    );
                    $send_bx = EventBitrixAddTask::dispatch(collect($data_task));

                    if (!empty($last_ticket->find_client()['channel_chat_id'])) {
                        BotCompleteSending::dispatch(collect($send_bx[0]['task'])->only('id', 'title', 'description')->merge(["chat_id" => $last_ticket->find_client()['channel_chat_id']]));
                    }
                    $user = $bot->getUser();
                    $id_user = $user->getId();
                    DB::table('tg_token_session')->where('user_id', '=', $id_user)->delete();
                }
            }
        }
    }
    public function default($bot)
    {
        $check_status = $bot->getMessage()->getPayload();
        if (isset($check_status['chat'])) {
            if ($check_status['from']['id'] == $check_status['chat']['id']) {
                $last_ticket = new FindClientDB();
                if (empty($last_ticket->find_client())) {
                    $bot->startConversation(new StartConversation);
                } else {
                    $keyboard = Keyboard::create()->type(Keyboard::TYPE_KEYBOARD)
                        ->oneTimeKeyboard(true)
                        ->resizeKeyboard(true)
                        ->addRow(
                            KeyboardButton::create("–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è")->callbackData('first_inline')
                        )
                        ->toArray();
                    $bot->reply('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è¬ª, –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.' . "\n" . "\n" . '–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üéõ', $keyboard);
                }
            }
        }
    }
}
